const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const isProduction = process.env.NODE_ENV === 'production';
const webpack = require('webpack');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'public'),
    filename: './assets/js/index.js',
  // emit hot-update files outside `public` into a sibling `hot-update` folder
  // (so they are easy to remove and won't live inside public static files)
  // These paths are relative to `output.path` (public), so '../hot-update' points
  // to a directory next to `public` (i.e. <repo>/hot-update).
  hotUpdateMainFilename: '../hot-update/[hash].hot-update.json',
  hotUpdateChunkFilename: '../hot-update/[id].[hash].hot-update.js',
    // Change clean option to preserve existing files in public directory
    // Only clean the assets directory which is generated by webpack
    clean: {
      keep: /^(?!assets\/).*$/ // Keep all files/directories that are not under assets/
    },
  },
  devtool: "source-map",
  plugins: [
    // MiniCssExtractPlugin means that CSS will be extracted into a separate file instead of being inlined in the JS bundle.
        new MiniCssExtractPlugin({
          filename: './assets/css/[name].css',
          chunkFilename: './assets/css/[id].css',
        }),
        new CopyWebpackPlugin({'patterns': [
            {from:'./src/scss/images', to:'./assets/css/images'},
            {from:'./src/scss/fonts', to:'./assets/css/fonts'},
            {from: './node_modules/bootstrap-icons/font/fonts', to: './assets/css/fonts'},
            {from: './node_modules/jquery-colorbox/example2/images', to: './assets/css/images'},
        ]}), //kopiuje po prostu cały katalog 1 do 1, ale można zrobić z lodash src="<%=require('./src/images/logo.png')%>"

        new webpack.ProvidePlugin({
          $: "jquery",
          jQuery: "jquery",
          jquery: 'jquery',
          "window.jQuery": 'jquery',
        }), //Most legacy modules rely on the presence of specific globals, like jQuery plugins do on $ or jQuery. Configure webpack, to prepend var $ = require("jquery") everytime it encounters the global $ identifier.
  ],
  devServer: {
    // serve both the main public static files and the external hot-update folder
    static: [
      { directory: path.join(__dirname, 'public') },
      { directory: path.join(__dirname, 'hot-update'), publicPath: '/hot-update' },
    ],
    hot: true,
    port: 8080,
    devMiddleware: {
      // Only write hot-update files and their json manifests (and optionally maps) to disk.
      // This keeps normal bundles (JS/CSS) in memory and prevents overwriting static public files.
      writeToDisk: (filePath) => {
        // normalize to forward slashes for Windows
        const p = filePath.replace(/\\/g, '/');
        // Only write files emitted into the external `hot-update` folder and
        // only HMR manifest/chunk files (e.g. *.hot-update.js and *.hot-update.json).
        return /\/hot-update\/.*hot-update\.(js|json)$/.test(p);
      },
    },
    // open: {
    //   app: {
    //     name: 'chrome',
    //     //arguments: ['--new-window'],
    //   },
    // },
    open: false,
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.scss$/,
        use: [
          // 'style-loader', // Injects CSS into the DOM
          // 'css-loader',   // Translates CSS into CommonJS

          // 'style-loader' means that CSS will be injected into the DOM via a <style> tag.
          isProduction? 'style-loader' : MiniCssExtractPlugin.loader,
          // isProduction ? MiniCssExtractPlugin.loader : 'style-loader',

                    { 
                        loader: "css-loader",
                        options: {
                            url: false,
                            sourceMap: true
                        }
                    },
                    {
                    loader: 'postcss-loader',
                        options: {
                          postcssOptions: {
                            plugins: () => [
                              require('autoprefixer')
                            ]
                          }
                        }
                    },
          {
            loader: 'sass-loader',  
            options: {
              sourceMap: true,
              // need this until bootstrap is updated, @see https://github.com/twbs/bootstrap/issues/40621
              // and https://github.com/twbs/bootstrap/issues/29853
              sassOptions: {
                //suppress deprecation warnings related to "mixed-decls" and "import" keep your build output cleaner
                silenceDeprecations: ['mixed-decls', 'import'],
                //originate from dependencies = node_modules folder
                quietDeps: true,
                //generally silences most output from the tool
                //quiet: true,
              },
            },
          }
        ],
      },
      {
        test: /\.svg$/,
        use: ['@svgr/webpack'],
      },
    ],
  },
  resolve: {
    extensions: ['.js', '.jsx'],
  },
};

// File termination